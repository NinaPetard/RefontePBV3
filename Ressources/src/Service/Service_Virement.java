package proxibanque_V2.Service;

import proxibanque_V2.metier.Compte;
import proxibanque_V2.metier.Conseiller;
import proxibanque_V2.metier.Virement;
import java.util.Date;

import proxibanque_V2.dao.DAO_Compte;
import proxibanque_V2.dao.DAO_Conseiller;
import proxibanque_V2.dao.DAO_Verifications;
import proxibanque_V2.dao.DAO_Virement;
import proxibanque_V2.dao.DAO_idGenerators;

public class Service_Virement {
	/**
	 * Creates an object of class Virement based on accounts and amount of the
	 * transfer.
	 * 
	 * @param compteDebit
	 *            Account on which the money will be taken
	 * @param compteCredit
	 *            Account on which the money will be sent
	 * @param montant
	 *            Amount of money which will be transfered
	 * @return returns an object of class Virement with id and date automatically
	 *         generated by the method
	 */

	public Virement creerVirement(int idcomptedebit, int idcomptecredit, Double montant) {

		DAO_Compte dc = new DAO_Compte();
		Virement virement = new Virement(dc.getComptewId(idcomptedebit), dc.getComptewId(idcomptecredit), montant);

		Date date = new Date();
		virement.setDate(date);

		DAO_idGenerators idg = new DAO_idGenerators();
		virement.setIdVirement(idg.createidVirement());

		return virement;
	}

	/**
	 * Checks if a money transfer is possible, the method verifies if both accounts do
	 * exist, there is enough money on sender's account for the transfer to be
	 * done and the advisor making the transfer is the client's advisor.
	 * 
	 * @param virement
	 *            java object of class Virement on which the transfer info are
	 * @return return a String object, either to inform the transfer was correctly
	 *         performed or the problem encoutered if it was not.
	 */

	public String checkerVirement(int idcomptedebit, int idcomptecredit, Double montant, Conseiller conseiller) {

		String txt = "";
		boolean okcompte1 = false;
		boolean oksolde1 = false;
		boolean okcompte2 = false;
		boolean okclient = false;

		DAO_Verifications daoV = new DAO_Verifications();
		DAO_Compte dc = new DAO_Compte();
		DAO_Conseiller dc2 = new DAO_Conseiller();
		
		
		okcompte1 = daoV.authCompte(idcomptedebit);
		okcompte2 = daoV.authCompte(idcomptecredit);
		

		if (okcompte1 == false ) {
			txt = "Le compte débiteur n'a pas pu être trouvé";
			return txt;
		}

		else if (okcompte2 == false) {
			txt = "Le compte créditeur n'a pas pu être trouvé";
			return txt;
		}	
		Compte comptedebit = dc.getComptewId(idcomptedebit);
		oksolde1 = comptedebit.getSolde() + comptedebit.getDecouvert() > montant;
		
		if (oksolde1 == false) {			
			txt = txt + "Le compte débiteur n'a pas un solde suffisant pour effectuer le virement";
			return txt;
		}
		
		if (idcomptedebit == idcomptecredit) {			
			txt = txt + "Le compte débiteur et le compte créditeur sont les mêmes";
			return txt;
		}
		
		int idcli = dc.getidCliwCpt(idcomptedebit);
		int idcons =conseiller.getIdConseiller(); 
		okclient = dc2.checkCliCons(idcons, idcli);
		
		if(okclient == false) {
		txt = txt + "Vous n'êtes pas le gestionnaire de ce compte";
		return txt;
		}
					
		
		return txt;
		
	}
	
	/**
	 * Gives instruction to perform and record the transfer in the database, as weel as sending the feedback the transfer was made.
	 * @param idcomptedebit account from which the money will be taken
	 * @param idcomptecredit account to which the money will be sent
	 * @param montant amount of money to transfer
	 * @return
	 */
	
	public String faireVirement(int idcomptedebit, int idcomptecredit, Double montant) {
		DAO_Virement daov = new DAO_Virement();
		DAO_Compte dc = new DAO_Compte();
		Compte comptedebit = dc.getComptewId(idcomptedebit);
		Compte comptecredit = dc.getComptewId(idcomptecredit);
		String txt = daov.faireVirement(comptedebit.getIdCompte(), comptecredit.getIdCompte(), montant);

		Virement virement = creerVirement(idcomptedebit, idcomptecredit, montant);
		daov.insertVirement(virement);
		txt = "Le virement a bien été effectué";
		return txt;
	}

}
